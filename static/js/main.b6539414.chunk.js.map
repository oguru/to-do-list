{"version":3,"sources":["components/ToDoCreator/ToDoCreator.module.scss","components/Button/index.js","components/Button/Button.jsx","components/ToDoCreator/index.js","components/ToDoCreator/ToDoCreator.jsx","components/ToDoItem/index.js","components/ToDoItem/ToDoItem.jsx","firebase.js","containers/Dashboard/index.js","containers/Dashboard/Dashboard.jsx","App.js","serviceWorker.js","index.js","components/ToDoItem/ToDoItem.module.scss","components/Button/Button.module.scss","containers/Dashboard/Dashboard.module.scss"],"names":["module","exports","Button","props","btnStyle","btnText","handleClick","color","noBorder","buttonStyle","onClick","className","styles","button","ToDoCreator","addToDb","addTask","setDate","shortDateCr","storeColor","useState","changeColor","useEffect","toDoCreator","container","for","onInput","event","target","value","type","name","task","colorButtons","style","backgroundColor","ToDoItem","complDate","dateCr","removeFromDb","toDoItem","readOnly","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Dashboard","items","updateItems","newTask","completionDate","stickyColor","currentDate","Date","getDate","getMonth","getFullYear","fetchData","collection","orderBy","get","then","querySnapshot","array","forEach","doc","id","addId","data","push","mainPage","toDoNotes","dateAdded","newDoc","fullDate","set","map","item","delete","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b6539414.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"yellow\":\"ToDoCreator_yellow__2g4Hd\",\"blue\":\"ToDoCreator_blue__1V_BA\",\"green\":\"ToDoCreator_green__1qJfw\",\"orange\":\"ToDoCreator_orange__2jZmQ\",\"pink\":\"ToDoCreator_pink__BBN5N\",\"toDoCreator\":\"ToDoCreator_toDoCreator__1HvUv\",\"colorButtons\":\"ToDoCreator_colorButtons__2juR0\",\"container\":\"ToDoCreator_container__334FD\",\"task\":\"ToDoCreator_task__N8z5b\",\"button\":\"ToDoCreator_button__1bMfO\"};","import Button from \"./Button\";\n\nexport default Button;\n","import React from \"react\";\r\nimport styles from \"./Button.module.scss\";\r\n\r\nconst Button = props => {\r\n  const { btnStyle, btnText, handleClick, color, noBorder } = props;\r\n\r\n  const buttonStyle = `styles.${btnStyle}`;\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={handleClick}\r\n        className={`${buttonStyle} ${styles.button} ${styles[color]} ${styles[noBorder]}`}\r\n      >\r\n        {btnText}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import ToDoCreator from \"./ToDoCreator\";\n\nexport default ToDoCreator;\n","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./ToDoCreator.module.scss\";\r\nimport Button from \"../Button\";\r\n\r\nconst ToDoCreator = props => {\r\n  const { addToDb, addTask, setDate, shortDateCr, storeColor } = props;\r\n\r\n  const [color, changeColor] = useState(\"yellow\");\r\n\r\n  useEffect(() => {\r\n    storeColor(color)\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className={`${styles.toDoCreator} ${styles[color]}`}>\r\n        <h1>Add To Do Item Here!</h1>\r\n        <div className={styles.container}>\r\n          <label for=\"task\">Task: </label>\r\n          <textarea\r\n            onInput={event => addTask(event.target.value)}\r\n            type=\"text\"\r\n            name=\"task\"\r\n            className={styles.task}\r\n          />\r\n        </div>\r\n        <div className={styles.container}>\r\n          <p>\r\n            Date created: <span>{shortDateCr}</span>\r\n          </p>\r\n        </div>\r\n        <div className={styles.container}>\r\n          <label for=\"date\">Completion date: </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"date\"\r\n            onInput={event => setDate(event.target.value)}\r\n          />\r\n        </div>\r\n        <div className={styles.colorButtons}>\r\n          <button\r\n            onClick={() => changeColor(\"yellow\")}\r\n            style={{ backgroundColor: \"#faee30\" }}>\r\n          </button>\r\n          <button\r\n            onClick={() => changeColor(\"blue\")}\r\n            style={{ backgroundColor: \"#6bbbe5\" }}>\r\n          </button>\r\n          <button\r\n            onClick={() => changeColor(\"green\")}\r\n            style={{ backgroundColor: \"#90d457\" }}>\r\n          </button>\r\n          <button\r\n            onClick={() => changeColor(\"orange\")}\r\n            style={{ backgroundColor: \"#f9c276\" }}>\r\n          </button>\r\n          <button\r\n            onClick={() => changeColor(\"pink\")}\r\n            style={{ backgroundColor: \"#f99fcb\" }}>\r\n          </button>\r\n        </div>\r\n        <div className={styles.button}>\r\n          <Button\r\n            color={color}\r\n            btnText={\"Add!\"}\r\n            btnStyle={\"add\"}\r\n            handleClick={() => {\r\n              addToDb();\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoCreator;\r\n","import ToDoItem from \"./ToDoItem\";\n\nexport default ToDoItem;\n","import React from \"react\";\r\nimport styles from \"./ToDoItem.module.scss\";\r\nimport Button from \"../Button\";\r\n\r\nconst ToDoItem = props => {\r\n  const {color, complDate, dateCr, task, removeFromDb } = props;\r\n\r\n  return (\r\n    <>\r\n      <div className={`${styles.toDoItem} ${styles[color]}`}>\r\n        <div className={styles.container}>\r\n          <label>Task:</label>\r\n          <textarea readOnly>{task}</textarea>\r\n        </div>\r\n        <div className={styles.container}>\r\n          <p>\r\n            Date created:<span>{dateCr}</span>\r\n          </p>\r\n        </div>\r\n        <div className={styles.container}>\r\n          <p>\r\n            Completion date: <span>{complDate}</span>\r\n          </p>\r\n        </div>\r\n        <div className={styles.button}>\r\n          <Button\r\n            color={color}\r\n            btnText={\"Delete\"}\r\n            btnStyle={\"delete\"}\r\n            handleClick={removeFromDb}\r\n            noBorder={\"noBorder\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoItem;\r\n","import * as firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBWhWMYkSFpkVOPkfOThTd1D-uis4iHek4\",\r\n    authDomain: \"to-do-list-9a610.firebaseapp.com\",\r\n    databaseURL: \"https://to-do-list-9a610.firebaseio.com\",\r\n    projectId: \"to-do-list-9a610\",\r\n    storageBucket: \"to-do-list-9a610.appspot.com\",\r\n    messagingSenderId: \"471667296767\",\r\n    appId: \"1:471667296767:web:b940086131890833b6ffca\",\r\n    measurementId: \"G-F2XQMV1RSB\"  \r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firestore = firebase.firestore();","import Dashboard from \"./Dashboard\";\n\nexport default Dashboard;\n","import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./Dashboard.module.scss\";\r\nimport ToDoCreator from \"../../components/ToDoCreator\";\r\nimport ToDoItem from \"../../components/ToDoItem\";\r\nimport { firestore } from \"../../firebase.js\";\r\n\r\nconst Dashboard = () => {\r\n  const [items, updateItems] = useState([]);\r\n  const [newTask, addTask] = useState(\"\");\r\n  const [completionDate, setDate] = useState(\"\");\r\n  const [stickyColor, changeColor] = useState(\"yellow\");\r\n\r\n  let currentDate = new Date();\r\n  let shortDateCr = `\r\n    ${currentDate.getDate()}\r\n    /${currentDate.getMonth()}\r\n    /${currentDate.getFullYear()}`;\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    firestore\r\n      .collection(\"data\")\r\n      .orderBy(\"fullDate\")\r\n      .get()\r\n      .then(querySnapshot => {\r\n        const array = [];\r\n\r\n        querySnapshot.forEach(doc => {\r\n          const id = (doc.id);\r\n          const addId = { ...doc.data(), id: id };\r\n          array.push(addId);\r\n        });\r\n        updateItems(array);\r\n      });\r\n  };\r\n\r\n  const addToDb = () => {\r\n\r\n    const dateAdded = new Date();\r\n\r\n    const newDoc = {\r\n      task: newTask,\r\n      dateCr: shortDateCr,\r\n      complDate: completionDate,\r\n      color: stickyColor,\r\n      fullDate: dateAdded\r\n    };\r\n\r\n    firestore\r\n      .collection(\"data\")\r\n      .doc()\r\n      .set(newDoc)\r\n      .then(() => {\r\n        fetchData();\r\n      });\r\n  };\r\n\r\n  const removeFromDb = (item) => {\r\n\r\n    firestore\r\n      .collection(\"data\")\r\n      .doc(item.id)\r\n      .delete()\r\n      .then(() => fetchData())\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <section className={styles.mainPage}>\r\n        <div className={styles.toDoNotes}>\r\n          <ToDoCreator\r\n            storeColor={changeColor}\r\n            addToDb={addToDb}\r\n            addTask={addTask}\r\n            setDate={setDate}\r\n            shortDateCr={shortDateCr}\r\n          />\r\n          {items.map(item => {\r\n            return <div><ToDoItem\r\n              complDate={item.complDate}\r\n              dateCr={item.dateCr}\r\n              task={item.task}\r\n              color={item.color}\r\n              removeFromDb={() => removeFromDb(item)}\r\n            /></div>\r\n          })}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Dashboard from \"./containers/Dashboard\"\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div>\r\n      <Dashboard />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"yellow\":\"ToDoItem_yellow__1Lajk\",\"blue\":\"ToDoItem_blue__1uHHM\",\"green\":\"ToDoItem_green__2QG9U\",\"orange\":\"ToDoItem_orange__2y14o\",\"pink\":\"ToDoItem_pink__3eqs4\",\"toDoItem\":\"ToDoItem_toDoItem__2yUWH\",\"container\":\"ToDoItem_container__19zor\",\"button\":\"ToDoItem_button__2AfSH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1Xl8e\",\"noBorder\":\"Button_noBorder__2KgCG\",\"yellow\":\"Button_yellow__gEYgl\",\"blue\":\"Button_blue__30xCS\",\"green\":\"Button_green__3LBsZ\",\"orange\":\"Button_orange__2Qiy9\",\"pink\":\"Button_pink__2pX6m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainPage\":\"Dashboard_mainPage__2WvUO\",\"toDoNotes\":\"Dashboard_toDoNotes___Simq\"};"],"sourceRoot":""}